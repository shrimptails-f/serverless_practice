service: lambda-demo-python

provider:
  name: aws
  runtime: python3.9
  stage: dev
  region: ap-northeast-1
  environment:
    DYNAMODB_TABLE: ${self:service}-${self:provider.stage}-users
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

plugins:
  - serverless-python-requirements

functions:
  hello:
    handler: handler.hello
    events:
      - http:
          path: hello
          method: get

  users:
    handler: handler.get_users
    timeout: 30
    memorySize: 128
    events:
      - http:
          path: users
          method: get
          cors: true

  user:
    handler: handler.get_user
    timeout: 30
    memorySize: 128
    events:
      - http:
          path: users/{id}
          method: get
          cors: true

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

package:
  include:
    - handler.py
